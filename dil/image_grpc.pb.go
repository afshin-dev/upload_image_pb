// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: PATH/image.proto

package dil

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImageStoreClient is the client API for ImageStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageStoreClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (ImageStore_UploadClient, error)
}

type imageStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewImageStoreClient(cc grpc.ClientConnInterface) ImageStoreClient {
	return &imageStoreClient{cc}
}

func (c *imageStoreClient) Upload(ctx context.Context, opts ...grpc.CallOption) (ImageStore_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImageStore_ServiceDesc.Streams[0], "/upload_image.ImageStore/upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &imageStoreUploadClient{stream}
	return x, nil
}

type ImageStore_UploadClient interface {
	Send(*ImageRequest) error
	CloseAndRecv() (*ImageResponse, error)
	grpc.ClientStream
}

type imageStoreUploadClient struct {
	grpc.ClientStream
}

func (x *imageStoreUploadClient) Send(m *ImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *imageStoreUploadClient) CloseAndRecv() (*ImageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ImageStoreServer is the server API for ImageStore service.
// All implementations must embed UnimplementedImageStoreServer
// for forward compatibility
type ImageStoreServer interface {
	Upload(ImageStore_UploadServer) error
	mustEmbedUnimplementedImageStoreServer()
}

// UnimplementedImageStoreServer must be embedded to have forward compatible implementations.
type UnimplementedImageStoreServer struct {
}

func (UnimplementedImageStoreServer) Upload(ImageStore_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedImageStoreServer) mustEmbedUnimplementedImageStoreServer() {}

// UnsafeImageStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageStoreServer will
// result in compilation errors.
type UnsafeImageStoreServer interface {
	mustEmbedUnimplementedImageStoreServer()
}

func RegisterImageStoreServer(s grpc.ServiceRegistrar, srv ImageStoreServer) {
	s.RegisterService(&ImageStore_ServiceDesc, srv)
}

func _ImageStore_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImageStoreServer).Upload(&imageStoreUploadServer{stream})
}

type ImageStore_UploadServer interface {
	SendAndClose(*ImageResponse) error
	Recv() (*ImageRequest, error)
	grpc.ServerStream
}

type imageStoreUploadServer struct {
	grpc.ServerStream
}

func (x *imageStoreUploadServer) SendAndClose(m *ImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *imageStoreUploadServer) Recv() (*ImageRequest, error) {
	m := new(ImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ImageStore_ServiceDesc is the grpc.ServiceDesc for ImageStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "upload_image.ImageStore",
	HandlerType: (*ImageStoreServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "upload",
			Handler:       _ImageStore_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "PATH/image.proto",
}
